"""
grids-html.py (previously griddef2html.py)

Generator of html file for grids
Parses a grids TXT file and generates a html page
HTML page output will be used in /models/config/2.Y.Z/grids.html

# Requirements
First run cime/scripts/query_config --grids --long > grids.txt
Then edit the grids.txt to remove all lines up to the first line containing 'alias:'

# Required arguments
--txtfile  : fully qualified path to grids.txt file
--htmlfile : HTML filename to use as path is set in paths.txt OUTROOT variable
--version  : sets the CESM version to use in the HTML

# Example usage
python grids-html.py 
--txtfile /fully-qualified-path-to/grids.txt
--htmlfile grids.html 
--version CESM2.Y.Z
"""



###
# imports and variable setting
###
import os, sys, re, glob
import datetime

# check for jinja2 to make templates with
try:
    import jinja2
except:
    raise SystemExit("ERROR: jinja2 not found, please install and try again")

# open the file with the paths for CIMEROOT CESMROOT OUTROOT
with open('paths.txt') as file:
    paths_data = file.read()

# parse the file to get the vars
paths_lines = paths_data.split('\n')
paths_vars = {}

# loop thru the line and split on the =
for path_line in paths_lines:
    if '=' in path_line:
        key, value = path_line.split('=')
        paths_vars[key.strip()] = value.strip()

# set the path vars
CIMEROOT = paths_vars.get('CIMEROOT')
CESMROOT = paths_vars.get('CESMROOT')
OUTROOT = paths_vars.get('OUTROOT')

# check the vars
if not (CIMEROOT and CESMROOT and OUTROOT):
    raise SystemExit("ERROR: must set CIMEROOT, CESMROOT, and OUTROOT in paths.txt")

# set the CIMEROOT to path for including other python imports
sys.path.append(os.path.join(CIMEROOT, "scripts", "Tools"))

# set the SRCROOT
SRCROOT = os.path.dirname(CIMEROOT)
os.environ['SRCROOT'] = SRCROOT

# CIME python imports
from standard_script_setup import *
from CIME.utils import expect
#from CIME.XML.entry_id import GenericXML
#from CIME.XML.files    import Files
#from CIME.XML.grids    import Grids

# global variables
_now = datetime.datetime.now().strftime('%Y-%m-%d')
logger = logging.getLogger(__name__)



###
# functions
###
# process the command line arguments
def commandline_options():
    parser = argparse.ArgumentParser(description='Read the config_grids.xml file and generate a corresponding HTML file.')
    CIME.utils.setup_standard_logging_options(parser)
    parser.add_argument('--htmlfile', nargs=1, required=True, help='Fully quailfied path to output HTML file.')
    parser.add_argument('--txtfile', nargs=1, required=True, help='Fully quailfied path to input modified text file generated by query_config --grids --long.')
    parser.add_argument('--version', nargs=1, required=True, help='Model version (e.g. CESM2.0)')
    options = parser.parse_args()
    CIME.utils.parse_args_and_handle_standard_logging_options(options)
    return options

###############################################################################
def _main_func(options, work_dir):
###############################################################################

    """Construct grids html from an XML file."""
        
    # Initialize a variables for the html template
    all_grids = dict()
    cesmmodel = options.version[0]

    # read in txtfile with the grids definitions
    txtfile = options.txtfile[0]
    expect((txtfile),
           'Cannot find query_config --grids --long output text file %s' %txtfile)

    # read the grids file looking for aliases and load the all_grids dict
    with open( txtfile, 'r') as f:
        for line in f:
            if "alias:" in line:
                line = line.rstrip('\n')
                alias = line.split(':')
                alias.pop(0)
                key = alias[0].lstrip()
                all_grids[key] = ''
            else:
                all_grids[key] += line
    f.close()


    # load up jinja template
    templateLoader = jinja2.FileSystemLoader( searchpath='{0}/templates'.format(work_dir) )
    templateEnv = jinja2.Environment( loader=templateLoader )

    # TODO - get the cesm_version for the CIME root
    tmplFile = 'grids.tmpl'
    template = templateEnv.get_template( tmplFile )
    templateVars = { 'today'              : _now,
                     'cesmmodel'          : cesmmodel,
                     'all_grids'          : all_grids }
        
    # render the template
    grid_tmpl = template.render( templateVars )

    # write the output file
    with open( options.htmlfile[0], 'w') as html:
        html.write(grid_tmpl)

    return 0

###############################################################################

if __name__ == "__main__":

    options = commandline_options()
##    work_dir = os.path.join(CIMEROOT,"scripts","Tools","xml2html")
    work_dir = os.getcwd()
    try:
        status = _main_func(options, work_dir)
        sys.exit(status)
    except Exception as error:
        print(str(error))
        sys.exit(1)




