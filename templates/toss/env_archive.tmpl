<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
  <head>

    <style type="text/css">
      body {
         font-family:'Open Sans', Arial, sans-serif;
         font-size:14px;
         font-weight:300;
         line-height:1.6em;
         color:#656565;
         width: 90%;
         align: center;
      }

      .container {
         padding: 0 30px 0 30px;
         padding-top: 0px;
         padding-right: 30px;
         padding-bottom: 30px;
         padding-left: 30px;
         position: relative;
      }
      
      dt { color:#656565; font-weight: bold }

      .accordionItem h2 { margin: 0; font-size: 1.1em; padding: 0.4em; color: #000; background-color: #E3E4E6; border-bottom: 1px solid #66d; width: 90%}
      .accordionItem h2:hover { cursor: pointer; }
      .accordionItem div { margin: 0; padding: 1em 0.4em; background-color: #eef; border-bottom: 1px solid #66d; width: 90%}
      .accordionItem.hide h2 { color: #000; background-color: #E3E4E6; width: 90%}
      
      .detailsBtn { background-color: #E3E4E6; }

      #variable { color:#66d; font-size: 1.2em; font-weight: bold; display: inline-block; margin-right: 30px; width: 550px; }
      #emphasis { color:#656565; font-weight: bold; display: inline-block; }
      #small { color:#9f9f9f; display: inline-block; }

    </style>

    <script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
    <script type="text/javascript">
    //<![CDATA[

    var accordionItems = new Array();

    function init() {

      // Grab the accordion items from the page
      var divs = document.getElementsByTagName( 'div' );
      for ( var i = 0; i < divs.length; i++ ) {
        if ( divs[i].className == 'accordionItem' ) accordionItems.push( divs[i] );
      }

      // Assign onclick events to the accordion item headings
      for ( var i = 0; i < accordionItems.length; i++ ) {
        var h2 = getFirstChildWithTagName( accordionItems[i], 'H2' );
        h2.onclick = toggleItem;
      }

      // Hide all accordion item bodies 
      for ( var i = 0; i < accordionItems.length; i++ ) {
        accordionItems[i].className = 'accordionItem hide';
        $(accordionItems[i]).find('div').slideUp();
      }
    }

    function toggleItem() {
      var itemClass = this.parentNode.className;

      // Hide all items
      for ( var i = 0; i < accordionItems.length; i++ ) {
        accordionItems[i].className = 'accordionItem hide';
        $(accordionItems[i]).find('div').slideUp();
      }

      // Show this item if it was previously hidden
      if ( itemClass == 'accordionItem hide' ) {
        this.parentNode.className = 'accordionItem';
        $(this).parent().find('div').slideDown();
      }
    }

    function getFirstChildWithTagName( element, tagName ) {
      for ( var i = 0; i < element.childNodes.length; i++ ) {
        if ( element.childNodes[i].nodeName == tagName ) return element.childNodes[i];
      }
    }

    function hideAll() {
      // Hide all accordian items
      for ( var i = 0; i < accordionItems.length; i++ ) {
        accordionItems[i].className = 'accordionItem hide';
        $(accordionItems[i]).find('div').slideUp();
      }
    }

    function showAll() {
      // show all accordian items
      for ( var i = 0; i < accordionItems.length; i++ ) {
        accordionItems[i].className = 'accordionItem hide';
        $(accordionItems[i]).find('div').slideDown();
      }
    }

     //]]>
    </script>

  </head>
  <body onload="init()">
    <div class="container">
        <h1>CASEROOT env_archive.xml Definitions</h1>
	<p style="font-size: 0.9em;">
	  Model Version: {{ model_version }}<br>
	  HTML created on: {{ today }}
	</p>
  	<p>
	This page contains the complete list of short-term archiver XML specifications.
	</p>
	<p>
	  The short-term archiver, case.st_archive, reads these settings in order to<br/>
	  determine the rules for migrating files out of the RUNDIR and into the DOUT_S_ROOT<br/>
	  location while preserving a complete set of necessary restart files in the RUNDIR.
	</p>
	<p>
	  These rules are specified in the CASEROOT/env_archive.xml file and rely on python<br/>
	  regular expression filename matches to determine where files should be moved or copied.<br/>
	  Please see <a href="http://www.cesm.ucar.edu/models/cesm2.0/cesm/filename_conventions_cesm.html">
	  CESM2 Output Filename Conventions</a> for details regarding filenames. 
	</p>
	<br/>
	Clicking on the name of a component will display additional descriptive information.<br/>  
	Click on the "Show Details" button and then cntl+F key to search for specific strings in this file.
	</p>

	<button class="detailsBtn" onclick="showAll();">Show Details</button>
	<button class="detailsBtn" onclick="hideAll();">Hide Details</button>

	<br/><br/>

	<div class="accordionItem">
	  <h2>Example: <span id="variable">atm - cam component class XML schema definition explained</span></h2>
	  <div>
	    <p>
	      Listed below is a fragment of the env_archive.xml file for specifying how
	      CAM files are archived from the RUNDIR to the DOUT_S_ROOT/atm location. </p>
	    <p>
	      Each CESM active component, including DART, has a section in the 
	      env_archive.xml file that follows this example schema. 
	    </p>
	    <p>
	      The short-term archiver has been tested to work with CESM cases that follow
	      the <a href="http://www.cesm.ucar.edu/models/cesm2.0/cesm/filename_conventions_cesm.html">
		CESM2 Output Filename Conventions</a> but users may want to manually modify the XML
	      for their particular experiment. Note that xmlquery and xmlchange do not work with
	      the env_archive.xml file.
	    </p>
	    <p>
	      To validate the env_archive.xml file after manually modifying any XML entries,
	      run the following <b>xmllint</b> from the CASEROOT:
	    </p>
	    <pre>
xmllint -schema $SRCROOT/cime/config/xml_schemas/env_archive.xsd env_archive.xml
	    </pre>
	    <dl>
	    <dt>comp_archive_spec compclass="atm" compname="cam"</dt>
	      <dd>component class is atmosphere <b>atm</b><br/>
		component name <b>cam</b></dd>
	      <br/>
	    <dt>rest_file_extension = \.[ri]\..*<br/>
	      rest_file_extension \.r[sh]\.*</dt>
	    <dd>restart file extensions pattern regular expression pattern matching</dd>
	      <br/>
	    <dt>hist_file_extension = \.h.*.nc$</dt>
	      <dd>history file extensions pattern regular expression pattern matching</dd>
	      <br/>
	    <dt>rest_history_varname = nhfil</dt>
	      <dd>restart history netcdf variable name pointing to required history file
		required for restart.</dd>
	      <br/>
	    <dt>rpointers<br/>
	        rpointer_file = rpointer$NINST_STRING.atm<br/>
		rpointer_content = $CASE.cam$NINST_STRING.r.$DATENAME.nc</dt>
	      <dd>
		The DOUT_S_ROOT/CASENAME/rest/[date] directory contains complete restart sets
		including rpointer files for each component and each instance of that
		component. The rpointer specifications define which files need to 
		be included in the rest directory.
	      </dd>
	    </div>		
	</div>

	{% for name, details in xml_dict|dictsort %}
	<div class="accordionItem">
	  <h2>Component Class: <span id="variable">{{ name }}</span></h2>
	    <div>
	      <dl>
		{% for key, value in details.items()|sort %}
		<dt>{{ key }}</dt>
		<dd>
		{% if value is iterable and value is not string %}
		  {% if key is equalto 'rpointers' %}
		    {% for items in value %}
		       {% for item in items %}
		         {{ item }}<br/>
		       {% endfor %}
		    {% endfor %}
		  {% else %}
		    {% for item in value %}
		      {{ item }}<br/>
		    {% endfor %}
		  {% endif %}
		{% else %}
		    {{ value }}
		{% endif %}
		</dd>
		{% endfor %}
	      </dl>
	    </div>
	</div>
	{% endfor %}
    </div>
  </body>
</html>
